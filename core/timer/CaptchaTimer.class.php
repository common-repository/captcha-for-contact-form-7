<?php

namespace f12_cf7_captcha\core\timer;

use f12_cf7_captcha\core\The;
use f12_cf7_captcha\core\wpdb;
use IPAddress;
use RuntimeException;

if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

/**
 * Class Captcha Timer
 * Generate the custom captcha as an image
 *
 * @package forge12\contactform7
 */
class CaptchaTimer {
	/**
	 * The unique ID
	 *
	 * @var int
	 */
	private $id = 0;
	/**
	 * The identifier used in the contact form
	 *
	 * @var string
	 */
	private $hash = '';
	/**
	 * The value - stores the time in milliseconds
	 *
	 * @var float|string
	 */
	private $value = '';
	/**
	 * The datetime whenever the captcha code has been created
	 *
	 * @var string
	 */
	private $createtime = '';

	/**
	 * @var string
	 */
	private $updatetime = '';

	/**
	 * Create a new Captcha Object
	 *
	 * @param $object
	 */
	public function __construct( $params = array() ) {
		$this->set_params( $params );
	}

	/**
	 * Set the parameters for the object.
	 *
	 * @param array $params An associative array of parameter values.
	 *                      The keys of the array should correspond to the property names of the object.
	 *                      The values of the array should be the new values for the corresponding properties.
	 *
	 * @return void
	 */
	private function set_params( array $params ) {
		foreach ( $params as $key => $value ) {
			if ( isset( $this->{$key} ) ) {
				$this->{$key} = $value;
			}
		}
	}

	/**
	 * Retrieves the table name for the CF7 Captcha Timer plugin.
	 *
	 * This method returns the name of the table that is used by the CF7 Captcha Timer plugin for storing data.
	 *
	 * @return string The table name for the CF7 Captcha Timer plugin.
	 *
	 * @throws RuntimeException When the global $wpdb is not defined.
	 */
	public function get_table_name(): string {
		global $wpdb;

		if ( null === $wpdb ) {
			throw new RuntimeException( 'WPDB not defined' );
		}

		return $wpdb->prefix . 'f12_cf7_captcha_timer';
	}

	/**
	 * Creates a table in the database.
	 *
	 * This method uses the WordPress function dbDelta() to create a table with the specified structure.
	 * The table name is generated by calling the get_table_name() method.
	 *
	 * @return void
	 */
	public function create_table(): void {
		require_once( ABSPATH . 'wp-admin/includes/upgrade.php' );

		$table_name = $this->get_table_name();

		$sql = sprintf( "CREATE TABLE %s (
                id int(11) NOT NULL auto_increment, 
                hash varchar(255) NOT NULL, 
                value varchar(255) NOT NULL,
                createtime varchar(255) DEFAULT '',
                PRIMARY KEY  (id)
            )", $table_name );
		dbDelta( $sql );
	}

	/**
	 * Delete the specified table from the database
	 *
	 * @throws RuntimeException if WPDB is not defined
	 */
	public function delete_table(): void {
		global $wpdb;

		if ( null === $wpdb ) {
			throw new RuntimeException( 'WPDB is not defined' );
		}

		$table_name = $this->get_table_name();

		$wpdb->query( sprintf( "DROP TABLE IF EXISTS %s", $table_name ) );

		# clear cron
		wp_clear_scheduled_hook( 'dailyCaptchaTimerClear' );
	}


	/**
	 * Get the ID of the object
	 *
	 * @return int The ID of the object
	 */
	public function get_id(): int {
		return $this->id;
	}

	/**
	 * Set the id of the object
	 *
	 * @param int $id The id to be set
	 *
	 * @return void
	 */
	public function set_id( int $id ): void {
		$this->id = $id;
	}


	/**
	 * Retrieves the hash value generated for this object.
	 * If the hash value is not yet generated, it calls the generateHash method to generate one and stores it.
	 *
	 * @return string The hash value.
	 */
	public function get_hash( string $user_ip_address = '' ): string {
		if ( empty( $this->hash ) ) {
			$this->hash = $this->generate_hash( $user_ip_address );
		}

		return $this->hash;
	}

	/**
	 * Generates a hash string using the user's IP address concatenated with the current time.
	 *
	 * @param string $user_ip_address The IP address of the user.
	 *
	 * @return string The generated hash string.
	 */
	private function generate_hash( string $user_ip_address ): string {
		return \password_hash( microtime( true ) . $user_ip_address, PASSWORD_DEFAULT );
	}

	/**
	 * Checks if the hash is valid.
	 *
	 * @return bool Returns true if the hash is valid, false otherwise.
	 */
	private function is_valid_hash(): bool {
		return ! empty( $this->hash );
	}


	/**
	 * Retrieves the value of the property.
	 *
	 * @TODO Check if that ever returns anything else than a float. - should be the time in ms for timer validation
	 *
	 * @return string|float The value of the property as a string.
	 */
	public function get_value() {
		return $this->value;
	}

	/**
	 * Sets the value of the property.
	 *
	 * @TODO Check if that ever returns anything else than a float. - should be the time in ms for timer validation
	 *
	 * @param $value The value to be set.
	 *
	 * @return void
	 */
	public function set_value( $value ) {
		$this->value = $value;
	}

	/**
	 * Returns the create time of the object.
	 *
	 * If the create time is not set, it will be generated using the current
	 * date and time.
	 *
	 * @return string The create time in the format 'Y-m-d H:i:s'
	 */
	public function get_create_time(): string {
		if ( empty( $this->createtime ) ) {
			$dt               = new \DateTime();
			$this->createtime = $dt->format( 'Y-m-d H:i:s' );
		}

		return $this->createtime;
	}

	/**
	 * Returns the create time of the object.
	 *
	 * If the create time is not set, it will be generated using the current
	 * date and time.
	 *
	 * @return string The create time in the format 'Y-m-d H:i:s'
	 */
	public function get_update_time(): string {
		if ( empty( $this->updatetime ) ) {
			$dt               = new \DateTime();
			$this->updatetime = $dt->format( 'Y-m-d H:i:s' );
		}

		return $this->updatetime;
	}

	/**
	 * Sets the creation time of the object.
	 *
	 * This function sets the creation time of the object to the current date and time in the format 'Y-m-d H:i:s'.
	 * It updates the 'updatetime' property with the current date and time.
	 *
	 * @return void
	 */
	private function set_create_time(): void {
		$dt               = new \DateTime();
		$this->updatetime = $dt->format( 'Y-m-d H:i:s' );
	}

	/**
	 * Retrieves a CaptchaTimer object by its ID.
	 *
	 * @param int $id The ID of the CaptchaTimer to retrieve.
	 *
	 * @return CaptchaTimer|null The retrieved CaptchaTimer object, or null if not found.
	 * @throws RuntimeException If WPDB global variable is not defined.
	 */
	public function get_by_id( int $id ): ?CaptchaTimer {
		global $wpdb;

		if ( ! $wpdb ) {
			throw new RuntimeException( 'WPDB not defined' );
		}

		$table_name = $this->get_table_name();

		$results = $wpdb->get_results( sprintf( 'SELECT * FROM %s WHERE id="%d"', $table_name, $id ), ARRAY_A );

		if ( null != $results ) {
			$results = new CaptchaTimer( $results[0] );
		}

		return $results;
	}

	/**
	 * Retrieves the CaptchaTimer object from the database based on the given hash.
	 *
	 * @param string $hash The hash value associated with the CaptchaTimer object.
	 *
	 * @return CaptchaTimer|null The retrieved CaptchaTimer object if found, or null if not found.
	 *
	 * @throws RuntimeException When the global $wpdb is not defined.
	 */
	public function get_by_hash( string $hash ): ?CaptchaTimer {
		global $wpdb;

		if ( ! $wpdb ) {
			throw new RuntimeException( 'WPDB not defined' );
		}

		$table_name = $this->get_table_name();

		$results = $wpdb->get_results( sprintf( 'SELECT * FROM %s WHERE hash="%s"', $table_name, $hash ), ARRAY_A );

		if ( empty( $results ) ) {
			$results = null;
		}

		if ( null != $results ) {
			$results = new CaptchaTimer( $results[0] );
		}

		return $results;
	}

	/**
	 * Deletes the object by its hash.
	 *
	 * @return bool Returns `true` if the deletion is successful, `false` otherwise.
	 */
	public function delete(): bool {
		return $this->delete_by_hash( $this->hash );
	}


	/**
	 * Deletes a record from the database table based on the given hash.
	 *
	 * @param string $hash The hash of the record to be deleted.
	 *
	 * @return bool True if the record was successfully deleted, false otherwise.
	 * @throws RuntimeException If WPDB global variable is not defined.
	 */
	public function delete_by_hash( string $hash ): bool {
		global $wpdb;

		if ( ! $wpdb ) {
			throw new RuntimeException( 'WPDB not defined' );
		}

		$table_name = $this->get_table_name();

		return $wpdb->query( sprintf( 'DELETE FROM %s WHERE hash="%s"', $table_name, $hash ) );
	}


	/**
	 * Checks if the current instance of the class is an update operation.
	 *
	 * @return bool Returns true if the instance is an update operation, otherwise false.
	 */
	private function is_update(): bool {
		if ( $this->id != 0 ) {
			return true;
		}

		return false;
	}

	/**
	 * Reset the table in the database.
	 *
	 * This method deletes all rows from the table specified by the get_table_name() method.
	 * It uses the global $wpdb object for executing the SQL query.
	 *
	 * @return int The number of rows affected by the delete operation.
	 * @throws RuntimeException If $wpdb is not defined.
	 *
	 */
	public function reset_table(): int {
		global $wpdb;

		if ( ! $wpdb ) {
			throw new RuntimeException( 'WPDB not defined' );
		}

		$table_name = $this->get_table_name();

		return $wpdb->query( sprintf( 'DELETE FROM %s', $table_name ) );
	}

	/**
	 * Deletes records from the database that are older than the specified create time.
	 *
	 * @param string $create_time The create time to compare against.
	 *
	 * @return int Returns the number of affected rows after the delete operation.
	 *
	 * @throws RuntimeException When WPDB is not defined.
	 */
	public function delete_older_than( string $create_time ): int {
		global $wpdb;

		if ( ! $wpdb ) {
			throw new RuntimeException( 'WPDB not defined' );
		}

		$table_name = $this->get_table_name();

		return (int) $wpdb->query( sprintf( 'DELETE FROM %s WHERE createtime < "%s"', $table_name, $create_time ) );
	}

	/**
	 * Retrieves the number of entries in the specified table.
	 *
	 * @return int The number of entries in the table.
	 * @throws RuntimeException If WPDB is not defined.
	 */
	public function get_count(): int {
		global $wpdb;

		if ( ! $wpdb ) {
			throw new RuntimeException( 'WPDB not defined' );
		}

		$table_name = $this->get_table_name();

		$results = $wpdb->get_results( sprintf( 'SELECT count(*) AS entries FROM %s', $table_name ) );

		if ( is_array( $results ) && isset( $results[0] ) ) {
			return (int) $results[0]->entries;
		}

		return 0;
	}

	/**
	 * Save the current object to the database.
	 *
	 * If the object's ID is not set, a new row will be inserted into the database.
	 * If the object's ID is set, the corresponding row in the database will be updated.
	 *
	 * @return int|bool The number of rows affected on successful update, or the ID of the inserted row on
	 *                  successful insert. False on failure.
	 * @throws RuntimeException If wpdb is not defined.
	 *
	 * @global wpdb $wpdb WordPress database object.
	 *
	 */
	public function save() {
		global $wpdb;

		if ( ! $wpdb ) {
			throw new RuntimeException( 'WPDB not defined' );
		}

		$table_name = $this->get_table_name();

		if ( $this->is_update() ) {
			$result = $wpdb->update( $table_name, array(
				'hash'       => $this->get_hash(),
				'createtime' => $this->get_create_time(),
				'value'      => $this->get_value(),
			), array(
				'id' => $this->get_id()
			) );
		} else {
			$result = $wpdb->insert( $table_name, array(
				'hash'       => $this->get_hash(),
				'value'      => $this->get_value(),
				'createtime' => $this->get_create_time(),
			) );

			$this->id = $wpdb->insert_id;
		}

		if ( $result === false ) {
			throw new RuntimeException( 'Database error occurred. Reactivate the plugin to create missing tables.' );
		}

		return $result;
	}
}